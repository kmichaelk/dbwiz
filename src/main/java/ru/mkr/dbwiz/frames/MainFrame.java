package ru.mkr.dbwiz.frames;

import ru.mkr.dbwiz.Main;
import ru.mkr.dbwiz.managers.ProjectManager;
import ru.mkr.dbwiz.utilities.UIUtility;
import ru.mkr.dbwiz.utilities.Utility;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import java.awt.*;
import java.awt.event.KeyEvent;
import java.io.File;

public class MainFrame extends JFrame {

    /* ---------------------------------- */
    private JPanel rootPanel;
    private JList<String> projectList;
    private JButton launchButton;
    /* ---------------------------------- */

    public MainFrame() {
        super(Main.NAME);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setContentPane(rootPanel);

        setJMenuBar(createMenuBar());

        projectList.setModel(new DefaultListModel<>());
        launchButton.addActionListener((e) -> launchProject());

        setSize(450, 600);
        setLocationRelativeTo(null);

        setVisible(true);

        refreshProjects();
    }

    private JMenuBar createMenuBar() {
        JMenuBar menu = new JMenuBar();

        JMenu file = UIUtility.getMenu("Файл", KeyEvent.VK_F);
        file.add(UIUtility.getMenuItem("Создать проект", KeyEvent.VK_N, (e) -> System.out.println("Create")));
        file.add(UIUtility.getMenuItem("Импортировать проект", (e) -> System.out.println("Import")));
        file.add(new JSeparator());
        file.add(UIUtility.getMenuItem("Обновить список проектов", (e) -> refreshProjects()));
        file.add(new JSeparator());
        file.add(UIUtility.getMenuItem("Выход", KeyEvent.VK_E, (e) -> System.exit(0)));
        menu.add(file);

        JMenu project = UIUtility.getMenu("Проект");
        project.add(UIUtility.getMenuItem("Запустить", KeyEvent.VK_R, (e) -> launchProject()));
        project.add(UIUtility.getMenuItem("Удалить", KeyEvent.VK_D, (e) -> System.out.println("Del project")));
        menu.add(project);

        JMenu help = UIUtility.getMenu("Справка");
        help.add(UIUtility.getMenuItem("Руководство пользователя", (e) ->
                Utility.safeOpenFile(Utility.extractResource("Руководство пользователя.pdf", "manual.pdf"))));
        help.add(new JSeparator());
        help.add(UIUtility.getMenuItem("Лицензии ПО с открытым исходным кодом", (e) -> {
            Utility.safeOpenFile(Utility.extractResource("licenses.html"));
        }));
        help.add(UIUtility.getMenuItem("О программе", (e) -> UIUtility.showMessage(
                "О программе",
                Main.NAME + " v" + Main.VERSION + "\n" +
                        "\n" +
                        "Утилита для автоматизации работы с документами и генерации отчетов\n" +
                        "\n" +
                        "(c) Mikhail K., 2020",
                JOptionPane.INFORMATION_MESSAGE, this
        )));
        menu.add(help);

        return menu;
    }

    private void launchProject() {
        String script = projectList.getSelectedValue();
        if (script == null) return;
        String project = "projects" + File.separator + script;
        if (ProjectManager.RUNNING_PROJECTS.contains(project)) {
            UIUtility.showMessage("Ошибка", "Данный проект уже выполняется", JOptionPane.ERROR_MESSAGE, this);
        } else {
            if (ProjectFrame.RUNNING_PROJECT_FRAMES.containsKey(project)) {
                ProjectFrame.RUNNING_PROJECT_FRAMES.get(project).toFront();
            } else {
                new Thread(() -> new ProjectFrame(project), "Project UI Thread").start();
            }
        }
    }

    private void refreshProjects() {
        projectList.clearSelection();

        DefaultListModel<String> model = ((DefaultListModel<String>) projectList.getModel());
        model.clear();

        for (String project : ProjectManager.findProjects()) {
            model.addElement(project);
        }
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        rootPanel = new JPanel();
        rootPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        rootPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        final JScrollPane scrollPane1 = new JScrollPane();
        rootPanel.add(scrollPane1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        projectList = new JList();
        projectList.setSelectionMode(0);
        scrollPane1.setViewportView(projectList);
        launchButton = new JButton();
        launchButton.setText("Запуск");
        rootPanel.add(launchButton, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return rootPanel;
    }
}
